--first we need a function thats computes a polynomial in PlÃ¼cker coordinates is that polynomial is given in Stiefel coordinates
piglia = (e,n,l) -> (
  outp:={};
  vr1:=new MutableList;
  vr2:=new MutableList;
  vr3:=new MutableList;
  for a from 0 to l-1 do vr1#a=e_{n*a..(n*(a+1))-1}; 
  for i from 0 to (l-2) do (while (vr1#i!=apply(n, a-> 0)) do (for j from i to (l-1) do vr2#j=position (vr1#j, a->a!=0);
  outp={apply(l, a-> (if a< i then 0 else vr2#a))}|outp;
  for j from i to (l-1) do (vr3#j=apply(n, a->(if a==vr2#j then 1 else 0)); vr1#j=vr1#j-vr3#j;)));
  outp
)
toBracket = (ch, elli, n,l) -> (
  subi:=subsets(n,l);
  R:=QQ[elli, MonomialOrder=>{Lex}]; 
  ch=sub(ch, R);
  pluchi:= apply(subi, a->p_a); 
  S:=QQ[pluchi]; 
  MT:=matrix apply(l, a->apply(n, b-> elli#(a*n+b))); 
  E:=apply(subi, a-> det MT_a);
  E=apply(E, a-> sub(a, R));
  OUT:=0_S; 
  while (ch!=0) do {lead:=leadMonomial(ch); 
  coef:=leadCoefficient(ch);
  b:=piglia(flatten exponents lead, n, l); 
  OUT=OUT+sub(coef, S)*(product apply(b, a->p_a)); 
  ch=ch-coef*(product apply(b, c->E#(position(subi, a->a==c))));};
  OUT
)

--compute curve in Grassmannian
L = flatten apply (3, i -> apply(4, j -> {i,j}))
L = flatten apply(L, s -> apply(L, t -> (s|t)))
S = QQ[x_0..x_3,y_0..y_3,apply(L, i -> r_i),p_{0, 1}, p_{0, 2}, p_{1, 2}, p_{0, 3}, p_{1, 3}, p_{2, 3}]
M = matrix{{x_0+x_3 , x_1-x_0 , x_2-x_1 , x_2+x_3},
{x_3-x_2 , x_0+x_3     , x_1-x_0 , x_1+x_2},
{x_2-x_1 , x_1-x_2+x_3 , x_0+x_3 , x_0}}
X = minors(3,M)
R = matrix{
{r_{0,0,0,1} ,  r_{0,0,1,1}+r_{1,0,0,1} ,  r_{0,0,2,1}+r_{2,0,0,1} , r_{1,0,1,1} , r_{1,0,2,1}+r_{2,0,1,1} , r_{2,0,2,1} },
{r_{0,0,0,2} ,  r_{0,0,1,2}+r_{1,0,0,2} ,  r_{0,0,2,2}+r_{2,0,0,2} , r_{1,0,1,2} , r_{1,0,2,2}+r_{2,0,1,2} , r_{2,0,2,2} },
{r_{0,0,0,3} ,  r_{0,0,1,3}+r_{1,0,0,3} ,  r_{0,0,2,3}+r_{2,0,0,3} , r_{1,0,1,3} , r_{1,0,2,3}+r_{2,0,1,3} , r_{2,0,2,3} },
{r_{0,1,0,2} ,  r_{0,1,1,2}+r_{1,1,0,2} ,  r_{0,1,2,2}+r_{2,1,0,2} , r_{1,1,1,2} , r_{1,1,2,2}+r_{2,1,1,2} , r_{2,1,2,2} },
{r_{0,1,0,3} ,  r_{0,1,1,3}+r_{1,1,0,3} ,  r_{0,1,2,3}+r_{2,1,0,3} , r_{1,1,1,3} , r_{1,1,2,3}+r_{2,1,1,3} , r_{2,1,2,3} },
{r_{0,2,0,3} ,  r_{0,2,1,3}+r_{1,2,0,3} ,  r_{0,2,2,3}+r_{2,2,0,3} , r_{1,2,1,3} , r_{1,2,2,3}+r_{2,2,1,3} , r_{2,2,2,3} }}
N = sub(M, apply(4, i -> x_i => y_i))
elli = {x_0,x_1,x_2,x_3,y_0,y_1,y_2,y_3}
subL = apply(L, i -> (r_i => sub(toBracket(M_(i#0,i#1)*N_(i#2,i#3)-N_(i#0,i#1)*M_(i#2,i#3), elli, 4,2),S) )) --took 2.3 seconds to compute
R = sub(R,subL)
D = minors(4,R) --took 20.7 seconds to compute
T = QQ[p_{0, 1}, p_{0, 2}, p_{1, 2}, p_{0, 3}, p_{1, 3}, p_{2, 3}]
D = sub(D,T)
D = saturate D

--compute equation of surface in P^3
S = QQ[p_{0, 1}, p_{0, 2}, p_{1, 2}, p_{0, 3}, p_{1, 3}, p_{2, 3}, x_0..x_3]
D = sub(D,S)
M = matrix{{0, p_{2,3}, -p_{1,3}, p_{1,2}},
{-p_{2,3}, 0, p_{0,3}, -p_{0,2}},
{p_{1,3}, -p_{0,3}, 0, p_{0,1}},
{-p_{1,2}, p_{0,2}, -p_{0,1}, 0}}
v = transpose matrix{{x_0,x_1,x_2,x_3}}
J = ideal flatten entries (M*v)+D
plVars = {p_{0,1},p_{0,2},p_{0,3},p_{1,2},p_{1,3},p_{2,3}}
J = saturate(J, ideal plVars)
eliminate(J, plVars)

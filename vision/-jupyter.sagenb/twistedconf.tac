
####################################################################
# WARNING -- Do not edit this file!   It is autogenerated each time
# the notebook(...) command is executed.
####################################################################
import sagenb.notebook.misc
sagenb.notebook.misc.DIR = '/home/baer/uni/phd/dissertation/digitalContent/vision' #We should really get rid of this!

#########
# Flask #
#########
import os, sys, random
import sagenb.flask_version.base as flask_base
opts={}
startup_token = '{0:x}'.format(random.randint(0, 2**128))
if True:
    opts['startup_token'] = startup_token
flask_app = flask_base.create_app("/home/baer/uni/phd/dissertation/digitalContent/vision/-jupyter.sagenb",interface="localhost",port=8080,secure=False, **opts)

def save_notebook(notebook):
    print "Quitting all running worksheets..."
    notebook.quit()
    print "Saving notebook..."
    notebook.save()
    print "Notebook cleanly saved."


########################################################################
# See http://twistedmatrix.com/documents/current/web/howto/using-twistedweb.html
#  (Serving WSGI Applications) for the basic ideas of the below code
####################################################################

##### START EPOLL
# Take this out when Twisted 12.1 is released, since epoll will then
# be the default reactor when needed.  See http://twistedmatrix.com/trac/ticket/5478
import sys, platform
if (platform.system()=='Linux'
    and (platform.release().startswith('2.6')
         or platform.release().startswith('3'))):
    try:
        from twisted.internet import epollreactor
        epollreactor.install()
    except:
        pass
#### END EPOLL


def save_notebook2(notebook):
    from twisted.internet.error import ReactorNotRunning
    save_notebook(notebook)

import signal
from twisted.internet import reactor
def my_sigint(x, n):
    try:
        reactor.stop()
    except ReactorNotRunning:
        pass
    signal.signal(signal.SIGINT, signal.SIG_DFL)

signal.signal(signal.SIGINT, my_sigint)

from twisted.web import server
from twisted.web.wsgi import WSGIResource
resource = WSGIResource(reactor, reactor.getThreadPool(), flask_app)

class QuietSite(server.Site):
    def log(*args, **kwargs):
        "Override the logging so that requests are not logged"
        pass

# Log only errors, not every page hit
site = QuietSite(resource)

# To log every single page hit, uncomment the following line
#site = server.Site(resource)

from twisted.application import service, strports
application = service.Application("Sage Notebook")
s = strports.service('tcp:8080:interface=localhost', site)
from sagenb.misc.misc import open_page; open_page('localhost', 8080, False, '/?startup_token=%s' % startup_token)
s.setServiceParent(application)

#This has to be done after flask_base.create_app is run
from functools import partial
reactor.addSystemEventTrigger('before', 'shutdown', partial(save_notebook2, flask_base.notebook))
